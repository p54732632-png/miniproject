# -*- coding: utf-8 -*-
"""mini_project_np_pd.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10kdRIld6rZPb_44ODdqIJsXeS7UpWSBH

## Mini Project Numpy-Pandas-Matplotlib

**Learning Goals**

*   Use NumPy to generate synthetic data (random scores, ages, etc.).
*   Use Pandas to organize into DataFrame.
*   Handle missing values (NaN).
*   Perform basic statistics (mean, median, std).
*   Create visualizations.
*   Use GroupBy for insights.
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# generate students data
np.random.seed(42)  # reproducibility

# Generate 20 students data
student_ids = np.arange(1, 21)   # 1 to 20
ages = np.random.randint(18, 25, size=20)   # ages between 18 and 24
math_scores = np.random.randint(40, 100, size=20).astype(float)   # math scores 40-100
science_scores = np.random.randint(35, 95, size=20).astype(float) # science scores 35-95
english_scores = np.random.randint(45, 90, size=20).astype(float) # english scores 45-90

# Introduce some missing values
math_scores[2] = np.nan
science_scores[7] = np.nan
english_scores[14] = np.nan

# create dataframe
data = {
    "Student_ID": student_ids,
    "Age": ages,
    "Math": math_scores,
    "Science": science_scores,
    "English": english_scores
}

df = pd.DataFrame(data)
print(df.head())

# handle missing values
print("\nMissing Values:\n", df.isna().sum())

# Fill NaN with subject average
df['Math'].fillna(df['Math'].mean(), inplace=True)
df['Science'].fillna(df['Science'].mean(), inplace=True)
df['English'].fillna(df['English'].mean(), inplace=True)

# Add new columns
# Calculate Total and Average score
df["Total"] = df[["Math","Science","English"]].sum(axis=1)
df["Average"] = df["Total"] / 3

print("\nUpdated DataFrame:\n", df.head())

# Descriptive Statistics
print("\nSummary Statistics:\n", df.describe())

print("\nClass Average Scores:")
print("Math:", df["Math"].mean())
print("Science:", df["Science"].mean())
print("English:", df["English"].mean())

# Visualization
# Line Plot of Average Scores
df["Average"].plot(kind="line", figsize=(8,5), title="Student Average Scores", marker='o')
plt.show()

# Bar Plot of Subject Averages
df[["Math","Science","English"]].mean().plot(kind="bar", figsize=(6,4), title="Subject Average Comparison", color=['blue','green','orange'])
plt.show()

# Group By Analysis
# Group students by Age and compute average score
age_group = df.groupby("Age")["Average"].mean()
print("\nAverage Score by Age:\n", age_group)

age_group.plot(kind="bar", figsize=(7,4), title="Average Score by Age", color='purple')
plt.show()